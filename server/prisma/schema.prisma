generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model announcements {
  id         Int       @id @default(autoincrement())
  group_id   Int?
  user_id    Int?
  title      String    @db.VarChar(255)
  content    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  groups     groups?   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model events {
  id          Int       @id @default(autoincrement())
  group_id    Int?
  created_by  Int?
  title       String    @db.VarChar(255)
  description String?
  event_date  DateTime  @db.Timestamp(6)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  groups      groups?   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model group_members {
  id        Int       @id @default(autoincrement())
  user_id   Int?
  group_id  Int?
  role      String?   @default("member") @db.VarChar(20)
  joined_at DateTime? @default(now()) @db.Timestamp(6)
  groups    groups?   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, group_id])
}

model groups {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  description   String?
  created_by    Int?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  announcements announcements[]
  events        events[]
  group_members group_members[]
  users         users?          @relation(fields: [created_by], references: [id], onUpdate: NoAction)
  messages      messages[]
}

model messages {
  id        Int       @id @default(autoincrement())
  group_id  Int?
  sender_id Int?
  message   String
  sent_at   DateTime? @default(now()) @db.Timestamp(6)
  groups    groups?   @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?    @relation(fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notifications {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  type       String    @db.VarChar(50)
  content    String
  is_read    Boolean?  @default(false)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            Int             @id @default(autoincrement())
  username      String          @unique @db.VarChar(50)
  email         String          @unique @db.VarChar(100)
  password      String
  firstName     String
  lastName      String
  avatar_url    String?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  announcements announcements[]
  events        events[]
  group_members group_members[]
  groups        groups[]
  messages      messages[]
  notifications notifications[]
}
